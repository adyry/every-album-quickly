import { useContext, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Close, Save } from '@mui/icons-material';
import {
  AppBar,
  Button,
  CircularProgress,
  Container,
  FormControlLabel,
  IconButton,
  Modal,
  Switch,
  TextField,
  Toolbar,
} from '@mui/material';
import axios from 'axios';

import { AuthCred } from '../app/providers';
import { clearTracks } from '../store/selectedSlice';

const menuId = 'primary-search-account-menu';

const SelectionManager = () => {
  const selected = useSelector((state) => state.selected);
  const dispatch = useDispatch();
  const [publicPlaylist, setPublicPlaylist] = useState(true);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [saveModalOpened, setSaveModalOpened] = useState(false);

  const {
    auth: { me },
  } = useContext(AuthCred);

  const [playlistName, setPlaylistName] = useState(`Discovered ${new Date().toDateString()}`);

  const onTextChange = (e) => {
    setPlaylistName(e.target.value);
  };

  const togglePublic = (e) => {
    setPublicPlaylist(e.target.checked);
  };

  const addToPlaylist = async () => {
    setLoading(true);
    const playlist = await axios.post(`https://api.spotify.com/v1/users/${me.id}/playlists`, {
      name: playlistName,
      public: publicPlaylist,
      description: 'Generated by every album quickly',
    });

    if (playlist.data) {
      const id = playlist.data.id;

      const packets = [];
      const inc = 100;
      for (let i = 0; i * inc < selected.length; i++) {
        packets[i] = selected.slice(inc * i, inc + inc * i);
      }

      const result = await Promise.all(
        packets.map((packet) =>
          axios.post(`https://api.spotify.com/v1/playlists/${id}/tracks`, {
            uris: packet,
          })
        )
      );
      setLoading(false);
      if (result.length && result[0]?.data) {
        setSaveModalOpened(false);
        setSuccess(true);
      }
    }
  };

  const clear = () => {
    setSuccess(false);
    dispatch(clearTracks());
  };

  return (
    <>
      <AppBar position="fixed" color="default" sx={{ top: 'auto', bottom: 0, left: 0, right: 0 }}>
        <Container maxWidth="lg" disableGutters>
          <Toolbar className="justify-between">
            <Button
              variant="contained"
              disabled={selected.length === 0}
              endIcon={
                <Save
                  size="large"
                  edge="end"
                  aria-label="Save selected items to a playlist"
                  aria-controls={menuId}
                  aria-haspopup="true"
                  color="inherit"
                />
              }
              onClick={() => setSaveModalOpened(true)}
            >
              Save&nbsp;<span className="xs:hidden">({selected.length})</span>
              <span className="max-xs:hidden">
                {selected.length} item{selected.length !== 1 && 's'}
              </span>
            </Button>
            <Button
              variant="contained"
              color="tertiary"
              onClick={clear}
              disabled={selected.length === 0}
            >
              Clear Selection
            </Button>
          </Toolbar>
        </Container>
      </AppBar>
      <Modal open={success} onClose={() => setSuccess(false)}>
        <div className="modal-content relative flex w-[300px] flex-col gap-4">
          <div className="absolute right-3 top-3">
            <IconButton onClick={() => setSuccess(false)}>
              <Close />
            </IconButton>
          </div>
          <h2 className="mb-4 text-xl">Successfully saved your selection to the playlist</h2>
          <div className="flex gap-4">
            <Button variant="contained" onClick={() => clear()}>
              Clear Selection
            </Button>
            <Button variant="contained" onClick={() => setSuccess(false)}>
              Close & Continue
            </Button>
          </div>
        </div>
      </Modal>
      <Modal open={saveModalOpened} onClose={() => setSaveModalOpened(false)}>
        <div className="modal-content relative flex max-w-[500px] flex-col gap-4">
          <div className="absolute right-3 top-3">
            <IconButton onClick={() => setSaveModalOpened(false)}>
              <Close />
            </IconButton>
          </div>
          <h2 className="mb-4 text-xl">Save {selected.length} tracks to a playlist</h2>

          <FormControlLabel
            control={<Switch onChange={togglePublic} />}
            label="Make playlist public"
          />
          <TextField
            onChange={onTextChange}
            value={playlistName}
            label="Name of the playlist"
            className="w-full"
          />

          <Button
            variant="contained"
            onClick={addToPlaylist}
            disabled={loading || selected?.length === 0}
            className="!mt-4 self-end"
          >
            Save
            {loading && <CircularProgress className="ml-2" size={20} color="secondary" />}
          </Button>
        </div>
      </Modal>
    </>
  );
};

export default SelectionManager;
